<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable type="KIND_SpriteKind" id="BEejz;iO_9v+O%(5A@Pt">Element</variable></variables><block type="pxt-on-start" id="n=,h:7Z]Lh9w+Q9(]jH`" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="(;5nR@]!@1L;ut!Cyok|" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class GameManager {" line1="    cursor: Sprite" line2="    field: Sprite[] = []" line3="    found: String[] = [&quot;Air&quot;, &quot;Water&quot;, &quot;Fire&quot;, &quot;Earth&quot;]" line4="" line5="    constructor() {" line6="        this.cursor = sprites.create(img`" line7="            . f f f ." line8="            f f 1 f f" line9="            f 1 1 1 f" line10="            f f 1 f f" line11="            . f f f ." line12="        `, SpriteKind.Player)" line13="        controller.moveSprite(this.cursor)" line14="        this.cursor.z = 100" line15="" line16="        this.field[0] = elementList.Air.toSprite()" line17="        this.field[0].left = 20" line18="        this.field[0].top = 30" line19="        this.field[1] = elementList.Water.toSprite()" line20="        this.field[1].right = 80" line21="        this.field[1].top = 30" line22="        this.field[2] = elementList.Earth.toSprite()" line23="        this.field[2].left = 20" line24="        this.field[2].bottom = 90" line25="        this.field[3] = elementList.Fire.toSprite()" line26="        this.field[3].right = 80" line27="        this.field[3].bottom = 90" line28="" line29="        this.registerControls();" line30="    }" line31="" line32="    private registerControls() {" line33="        controller.A.onEvent(ControllerButtonEvent.Pressed, function () {" line34="            sprites.allOfKind(SpriteKind.Element).forEach(function (i) {" line35="                if (this.cursor.overlapsWith(i)) {" line36="                    controller.moveSprite(i, 100, 100)" line37="                    return" line38="                }" line39="            })" line40="        })" line41="        controller.A.onEvent(ControllerButtonEvent.Released, function () {" line42="            this.mergeOverlappingSprites();" line43="        });" line44="" line45="        controller.B.onEvent(ControllerButtonEvent.Pressed, function () {" line46="            this.createNewElement();" line47="        })" line48="    }" line49="" line50="    private mergeOverlappingSprites() {" line51="        for (let i of sprites.allOfKind(SpriteKind.Element)) {" line52="            controller.moveSprite(i, 0, 0)" line53="            for (let j of sprites.allOfKind(SpriteKind.Element)) {" line54="                if (i.overlapsWith(j)) {" line55="                    let merge = i.data.merge(i, j)" line56="                    if (merge) {" line57="                        i.destroy()" line58="                        j.destroy()" line59="                        if (this.found.indexOf(merge.data.name) == -1) {" line60="                            game.showLongText(&quot;You found a new element: &quot; + merge.data.name, DialogLayout.Bottom)" line61="                            this.found.push(merge.data.name)" line62="                        }" line63="                        this.field.push(merge)" line64="                    }" line65="                }" line66="            }" line67="        }" line68="    }" line69="" line70="    private createNewElement() {" line71="        let element = game.askForString(&quot;Choose an element&quot;)" line72="        if (element === undefined) { return }" line73="        element = toLowerFirstUpper(element)" line74="        if (this.found.indexOf(element) != -1) {" line75="            this.field.push(elementList[element].toSprite())" line76="            this.field[this.field.length - 1].x = this.cursor.x" line77="            this.field[this.field.length - 1].y = this.cursor.y" line78="        } else if (elementList[element]) {" line79="            game.splash(&quot;Element has not been discovered&quot;)" line80="        } else {" line81="            game.splash(&quot;Element does not exist&quot;)" line82="        }" line83="    }" line84="}" numlines="85"></mutation><next><block type="typescript_statement" id="{^RH~8TVn*z14TZhbG6C" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let gameMngr = new GameManager()" numlines="1" declaredvars="gameMngr"></mutation></block></next></block></statement></block></xml>